name: Deploy Webscout with Supabase

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      port:
        description: 'Port to run the server on'
        required: false
        default: '8000'
      debug:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

env:
  # Map GitHub secrets to environment variables
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  # Alternative GitHub secret names (for compatibility)
  GITHUB_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  GITHUB_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  
  # Webscout configuration
  WEBSCOUT_AUTH_REQUIRED: 'true'
  WEBSCOUT_RATE_LIMIT_ENABLED: 'true'
  WEBSCOUT_REQUEST_LOGGING: 'true'
  WEBSCOUT_PORT: ${{ github.event.inputs.port || '8000' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install supabase  # Ensure Supabase is installed
        
    - name: 🔍 Verify Supabase credentials
      run: |
        echo "🔍 Checking Supabase credentials..."
        if [ -z "$SUPABASE_URL" ]; then
          echo "❌ SUPABASE_URL secret is not set!"
          echo "Please add SUPABASE_URL to your GitHub repository secrets."
          exit 1
        else
          echo "✅ SUPABASE_URL is set"
        fi
        
        if [ -z "$SUPABASE_ANON_KEY" ]; then
          echo "❌ SUPABASE_ANON_KEY secret is not set!"
          echo "Please add SUPABASE_ANON_KEY to your GitHub repository secrets."
          exit 1
        else
          echo "✅ SUPABASE_ANON_KEY is set"
        fi
        
        echo "🎯 Supabase credentials verified successfully!"
        
    - name: 🗄️ Test Supabase connection
      run: |
        echo "🔗 Testing Supabase connection..."
        python -c "
        import os
        from supabase import create_client
        
        url = os.getenv('SUPABASE_URL')
        key = os.getenv('SUPABASE_ANON_KEY')
        
        try:
            client = create_client(url, key)
            # Test connection by trying to access a table
            result = client.table('users').select('id').limit(1).execute()
            print('✅ Supabase connection successful!')
        except Exception as e:
            print(f'❌ Supabase connection failed: {e}')
            print('Please check your Supabase credentials and database setup.')
            exit(1)
        "
        
    - name: 🚀 Start Webscout server (Supabase mode)
      run: |
        echo "🚀 Starting Webscout server with Supabase..."
        echo "📊 Configuration:"
        echo "  - Database: Supabase (ONLY)"
        echo "  - Auth: Enabled"
        echo "  - Rate Limiting: Enabled"
        echo "  - Request Logging: Enabled"
        echo "  - Port: $WEBSCOUT_PORT"
        echo "  - Debug: ${{ github.event.inputs.debug }}"
        
        # Start the server with Supabase-only configuration
        if [ "${{ github.event.inputs.debug }}" = "true" ]; then
          python -m webscout.auth.server --port $WEBSCOUT_PORT --debug &
        else
          python -m webscout.auth.server --port $WEBSCOUT_PORT &
        fi
        
        SERVER_PID=$!
        echo "🎯 Server started with PID: $SERVER_PID"
        
        # Wait for server to start
        sleep 10
        
        # Test server health
        echo "🔍 Testing server health..."
        curl -f http://localhost:$WEBSCOUT_PORT/health || {
          echo "❌ Server health check failed!"
          kill $SERVER_PID 2>/dev/null || true
          exit 1
        }
        
        echo "✅ Server is running and healthy!"
        echo "🌐 Server URL: http://localhost:$WEBSCOUT_PORT"
        echo "📚 API Docs: http://localhost:$WEBSCOUT_PORT/docs"
        
        # Keep server running for a bit (for testing)
        sleep 30
        
        # Stop server
        echo "🛑 Stopping server..."
        kill $SERVER_PID 2>/dev/null || true
        
    - name: 📊 Display configuration summary
      run: |
        echo "📊 Webscout Supabase Configuration Summary:"
        echo "=========================================="
        echo "✅ Database: Supabase (REQUIRED)"
        echo "✅ Authentication: Enabled"
        echo "✅ Rate Limiting: Enabled"
        echo "✅ Request Logging: Enabled to Supabase"
        echo "✅ GitHub Secrets: Configured"
        echo "❌ MongoDB Fallback: DISABLED"
        echo "❌ JSON File Fallback: DISABLED"
        echo ""
        echo "🔧 Required GitHub Secrets:"
        echo "  - SUPABASE_URL: ✅ Set"
        echo "  - SUPABASE_ANON_KEY: ✅ Set"
        echo ""
        echo "🎯 This configuration ensures ALL data is stored in Supabase!"