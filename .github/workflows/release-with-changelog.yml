name: Create Release with Changelog

on:
  workflow_run:
    workflows: ["Publish to PyPI"]
    types:
      - completed
  workflow_dispatch:  # Allows manual trigger
    inputs:
      version:
        description: 'Version to create release for (e.g., 2025.10.15)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for changelog generation

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=$(grep -oP '__version__ = "\K[^"]+' webscout/version.py)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} does not exist"
          fi

      - name: Get previous tag
        id: previous_tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "previous_tag=" >> $GITHUB_OUTPUT
            echo "No previous tag found"
          else
            echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "Previous tag: $PREVIOUS_TAG"
          fi

      - name: Generate changelog
        id: changelog
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          PREVIOUS_TAG="${{ steps.previous_tag.outputs.previous_tag }}"
          
          echo "# 🚀 What's Changed in v$VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commit range
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMIT_RANGE=""
            echo "📝 **Initial Release**" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
            echo "📝 **Changes since $PREVIOUS_TAG**" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Categorize commits
          echo "## ✨ Features" >> CHANGELOG.md
          git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --grep="^feat" --grep="^feature" --regexp-ignore-case >> CHANGELOG.md || echo "- No new features" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          echo "## 🐛 Bug Fixes" >> CHANGELOG.md
          git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --grep="^fix" --grep="^bug" --regexp-ignore-case >> CHANGELOG.md || echo "- No bug fixes" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          echo "## 📚 Documentation" >> CHANGELOG.md
          git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --grep="^docs" --grep="^doc" --regexp-ignore-case >> CHANGELOG.md || echo "- No documentation updates" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          echo "## 🔧 Maintenance" >> CHANGELOG.md
          git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --grep="^chore" --grep="^refactor" --grep="^perf" --grep="^style" --grep="^test" --regexp-ignore-case >> CHANGELOG.md || echo "- No maintenance updates" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          echo "## 📦 Other Changes" >> CHANGELOG.md
          git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --invert-grep --grep="^feat" --grep="^fix" --grep="^docs" --grep="^chore" --grep="^refactor" --grep="^perf" --grep="^style" --grep="^test" --grep="^bug" --grep="^feature" --regexp-ignore-case >> CHANGELOG.md || echo "- No other changes" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Add statistics
          echo "## 📊 Statistics" >> CHANGELOG.md
          if [ -z "$PREVIOUS_TAG" ]; then
            TOTAL_COMMITS=$(git rev-list --count HEAD)
          else
            TOTAL_COMMITS=$(git rev-list --count $COMMIT_RANGE)
          fi
          echo "- **Total Commits:** $TOTAL_COMMITS" >> CHANGELOG.md
          
          if [ -z "$PREVIOUS_TAG" ]; then
            FILES_CHANGED=$(git ls-files | wc -l)
          else
            FILES_CHANGED=$(git diff --name-only $COMMIT_RANGE | wc -l)
          fi
          echo "- **Files Changed:** $FILES_CHANGED" >> CHANGELOG.md
          
          CONTRIBUTORS=$(git log $COMMIT_RANGE --format='%aN' | sort -u | wc -l)
          echo "- **Contributors:** $CONTRIBUTORS" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Add installation instructions
          echo "## 📦 Installation" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "pip install --upgrade webscout==$VERSION" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Add links
          echo "## 🔗 Links" >> CHANGELOG.md
          echo "- 📦 [PyPI Package](https://pypi.org/project/webscout/$VERSION/)" >> CHANGELOG.md
          echo "- 📖 [Documentation](https://github.com/OEvortex/Webscout/tree/v$VERSION/docs)" >> CHANGELOG.md
          echo "- 🐛 [Report Issues](https://github.com/OEvortex/Webscout/issues)" >> CHANGELOG.md
          echo "- 💬 [Discussions](https://github.com/OEvortex/Webscout/discussions)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Add footer
          echo "---" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/OEvortex/Webscout/compare/$PREVIOUS_TAG...v$VERSION" >> CHANGELOG.md
          
          # Output for GitHub Actions
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: false  # We generate our own
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload changelog artifact
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: changelog-v${{ steps.get_version.outputs.version }}
          path: CHANGELOG.md
          retention-days: 90

      - name: Comment on related PRs
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.get_version.outputs.version }}';
            const previousTag = '${{ steps.previous_tag.outputs.previous_tag }}';
            
            if (!previousTag) {
              console.log('No previous tag, skipping PR comments');
              return;
            }
            
            // Get commits in this release
            const commits = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: previousTag,
              head: 'HEAD'
            });
            
            // Extract PR numbers from commit messages
            const prNumbers = new Set();
            for (const commit of commits.data.commits) {
              const match = commit.commit.message.match(/#(\d+)/g);
              if (match) {
                match.forEach(pr => prNumbers.add(parseInt(pr.slice(1))));
              }
            }
            
            // Comment on each PR
            for (const prNumber of prNumbers) {
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `🎉 This PR is included in [v${version}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${version})!\n\nInstall it with:\n\`\`\`bash\npip install --upgrade webscout==${version}\n\`\`\``
                });
                console.log(`Commented on PR #${prNumber}`);
              } catch (error) {
                console.log(`Failed to comment on PR #${prNumber}: ${error.message}`);
              }
            }

      - name: Notification
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          echo "✅ Successfully created release v${{ steps.get_version.outputs.version }} with changelog!"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.version }}"

      - name: Skip notification
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "ℹ️ Release v${{ steps.get_version.outputs.version }} already exists, skipping creation"
